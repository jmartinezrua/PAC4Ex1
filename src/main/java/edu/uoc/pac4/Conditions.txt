Here is the translation of the file "Ejercicio 1.txt" into English:

---

**Exercise 1 (2.5 points)**

**Before you start, you must:**
- Read sections 3.6 to 3.9 of the Java Guide.
- Look at the class diagram called PAC4Ex1.png found in the zip file of the statement.
- Open the PAC4Ex1 project with IntelliJ. In the `edu.uoc.pac4` package of the `/src/test/java` directory, you will find the file with the unit tests provided. In the `edu.uoc.pac4` package of the `/src/main/java` directory, you must code the `DSLab` and `University` classes (along with the corresponding classes to manage exceptions), as well as the `DSLabStatus` enumeration. Their representations in the UML class diagram are available in the PAC4Ex1.png image attached with the .zip file of this statement.

As you can see in the UML diagram, we will model the behavior of an application that is responsible for executing and validating the activities developed by university students. Therefore, the `DSLab` and `University` classes will be coded, representing the application and the university respectively. Additionally, the relationship between these two classes is a unidirectional aggregation association, with the `University` class being aggregated to the `DSLab` class. This aggregation allows the application to query university data and display its information.

To complete this exercise and understand what you are doing, code the classes within the `edu.uoc.pac4` package. To code the class diagram and manage exceptions, consider the following specifications:

**Class DSLabException**
- Use the Java `Exception` class to throw exceptions when an anomalous or undesirable case occurs. However, when exceptions specific to the problem/context we are dealing with occur in a program, it is better to create our own exceptions (also called custom exceptions or user-defined exceptions) that are suitable for the needs of our program.
- At this point, you may be wondering: how do I create my own exception? Do you remember a mechanism that allows you to create a class from another by indicating the changes? Indeed, the inheritance mechanism. This is how we will create our own exceptions, by creating a class that inherits from the `Exception` class, which is part of the Java API.
- In the attached class diagram, to represent that a class throws an exception, we have used a type of relationship called dependency, which we have not seen in the notes. As you can see, it is a dashed line that goes from the `DSLab` class to the `DSLabException` class. To emphasize that it is an exception, some people put the word/role/label "throws" on the line. The dependency relationship/association indicates that a class A (e.g., `DSLab`) uses the service of another class B (e.g., `DSLabException`) to function fully. It is class A (e.g., `DSLab`) that knows the existence of class B (e.g., `DSLabException`). It is quite similar to a unidirectional binary association, but at the coding level, as the dependency relationship indicates the use of a service of class B by class A, it translates to class A instantiating an object of class B but not storing it in an instance attribute (i.e., not storing the reference). This is precisely what happens with exceptions; we create an instance of type `Exception` (or derived from `Exception`, like `DSLabException`) and use it by calling the `throw` statement, but we do not store the instance of type `Exception` (or derived class) in an instance attribute.
- We mention the existence of this type of association called dependency so that you realize that in this course we cover a small part (the most important and used) of class diagrams, but there is much more. In fact, class diagrams are one of the types of representation of the UML language, but there are more: use case diagram, sequence diagram, etc.
- To continue, create the new `DSLabException` class. The class should be located in the `edu.uoc.pac4` package and should:
  - Inherit from the Java class `Exception`. Often, if the class diagram is specific to a language (in our case, Java), it does not indicate that it inherits from language-specific classes (e.g., `Exception`) to avoid making the diagram unmanageable in size. If the class diagram is independent of the programming language (as it should be), then it makes sense not to indicate this inheritance because it depends on the language (in Java there is inheritance, in another language maybe not, or it would inherit from a differently named class).
  - Have the attributes shown in the attached class diagram that contain the error messages to be displayed when certain anomalies occur, and an exception of this type is thrown.
  - Have a parameterized constructor that receives a `String`. This constructor should only call the constructor of the parent class (i.e., superclass) whose signature is identical.

**Class UniversityException**
- Create the `university` package within `edu.uoc.pac4` and create the new `UniversityException` class. The class should be located in the `edu.uoc.pac4.university` package and should follow the same instructions as for the `DSLabException` class. This implies:
  - This class should inherit from the Java `Exception` class.
  - Define all the attributes as they appear in the UML diagram.
  - Implement a constructor with a `String` parameter that calls the constructor of the parent class.

**Class University**
- Define all the attributes declared in the UML diagram of this class with their corresponding access modifier (private, public, etc.).
- Whenever there is a name conflict, especially in setter methods (i.e., `setXXX`), you must use the reserved word `this`.
- `setName`: If the received parameter (`name`) is null, an empty string, or consists only of spaces, then it should throw a `UniversityException` with the message "[ERROR] Name cannot be null, empty or blank". Otherwise, assign the university name by removing any leading and trailing spaces.
- `setAbbreviation`: If the received parameter (`abbreviation`) is null or not composed only of uppercase letters and, in addition, does not have a length between 2 and 6 letters, then it should throw a `UniversityException` with the message "[ERROR] Abbreviation has to contain between 2 and 6 uppercase letters". Otherwise, assign the university abbreviation.
- `setFoundationDate`: If the received parameter (`foundationDate`) is null or is a future date, then it should throw a `UniversityException` with the message "[ERROR] Foundation date cannot be null or in the future". Otherwise, assign the university foundation date.
- `setAddress`: If the received parameter (`address`) is null, then it should throw a `UniversityException` with the message "[ERROR] Address cannot be null". Otherwise, assign the university address.
- `setWebsite`: If the received parameter (`website`) is null or is not a valid web page, then it should throw a `UniversityException`. Otherwise, assign the university website.
  - A web page can start with "http://" or "https://" (although it is not mandatory). Then, it can include subdomains separated by dots. Each subdomain can have letters, numbers, or hyphens, but must end with a dot. Next, it must have a main domain with letters, numbers, or hyphens, followed by an extension of at least two letters (e.g., .edu). Finally, it can include an optional path that starts with a slash (/).
- `toString`: If we read the official Java documentation, it says that `toString` returns the "textual representation of the object". What does this mean? It means it returns a string (i.e., a `String`) with information about the object. This information should be concise but informative/representative of the object so that a person can read it. The recommendation is that all classes override this method, as its default coding is the name of the class to which the object belongs, the symbol @, and the hexadecimal representation of the object's hash code (which is usually the memory address occupied by the object). Therefore, this method (inherited from the Java `Object` class) should be overridden and should return the university information in the following format:
  - `name, abbreviation, foundationDate, address, website`
  - For example:
    - `Universitat Oberta de Catalunya, UOC, 1994-10-06, Av. Tibidabo, 39-43, https://www.uoc.edu`

**Enum DSLabStatus**
- The enumeration literals are: `ACTIVE`, `INACTIVE`, and `MAINTENANCE`.
- For each literal, a state should be assigned with the following value:
  - `ACTIVE` → Active
  - `INACTIVE` → Inactive
  - `MAINTENANCE` → Maintenance
- `toString`: Override this method to return the state of the application in uppercase enclosed with the characters "[" and "]". For example: "[ACTIVE]".

**Class DSLab**
- Define all the attributes declared in the UML diagram of this class with their corresponding access modifier (private, public, etc.).
- Whenever there is a name conflict, especially in setter methods (i.e., `setXXX`), you must use the reserved word `this`.
- `setName`: If the received parameter (`name`) is null, an empty string, or consists only of spaces, then it should throw a `DSLabException` with the message "[ERROR] Name cannot be null, empty or blank". Otherwise, it should assign the application name by removing any leading and trailing spaces